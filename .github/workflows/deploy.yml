name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the dev branch
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up SSH agent for EC2 access
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      # Step 3: List repository files for debugging (optional)
      - name: List repository files
        run: |
          ls -R

      # Step 4: Check and delete myapp_old folder if exists
      - name: Check and delete myapp_old folder if exists
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.48.84.30 "if [ -d '/var/www/myapp_old' ]; then sudo rm -rf /var/www/myapp_old; fi"

      # Step 5: Move myapp to myapp_old
      - name: Move myapp to myapp_old
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.48.84.30 "if [ -d '/var/www/myapp' ]; then sudo mv /var/www/myapp /var/www/myapp_old; fi"

      # Step 6: Create new myapp folder
      - name: Create new myapp folder
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.48.84.30 "sudo mkdir -p /var/www/myapp && sudo chown -R ubuntu:ubuntu /var/www/myapp"

      # Step 7: Clone the repository into the myapp folder
      - name: Clone repository into myapp folder
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.48.84.30 "cd /var/www/myapp && git clone https://github.com/sumit-h-nagarkoti/tamma.git"

      # Step 8: Install Node.js
      - name: Install Node.js on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.48.84.30 "curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -"
          ssh -o StrictHostKeyChecking=no ubuntu@13.48.84.30 "sudo apt-get install -y nodejs"

      # Step 9: Install PM2 and app dependencies
      - name: Install PM2 and app dependencies
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.48.84.30 "cd /var/www/myapp/tamma && npm install pm2 --save && npm install"

      # Step 10: Create an S3 bucket (ensure AWS CLI is set up)
      - name: Create S3 bucket
        run: |
          aws s3 mb s3://my-app-env-file --region us-north-1

      # Step 11: Upload .env to S3
      - name: Upload .env to S3
        run: |
          aws s3 cp .env s3://my-app-env-file/.env

      # Step 12: Set S3 bucket policy for EC2 access only
      - name: Set S3 bucket policy for EC2 access only
        run: |
          aws s3api put-bucket-policy --bucket my-app-env-file --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::my-app-env-file/.env",
                "Condition": {
                  "StringEquals": {
                    "aws:SourceIp": "13.48.84.30"
                  }
                }
              }
            ]
          }'

      # Step 13: Download the .env file from S3 to EC2
      - name: Download .env file from S3 to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.48.84.30 "aws s3 cp s3://my-app-env-file/.env /var/www/myapp/tamma/.env"

      # Step 14: Stop the app using PM2
      - name: Stop the app using PM2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.48.84.30 "cd /var/www/myapp/tamma && pm2 stop my-app || true"

      # Step 15: Start the app with PM2
      - name: Start the app using PM2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.48.84.30 "cd /var/www/myapp/tamma && pm2 start app.js --name 'my-app' --env production"
